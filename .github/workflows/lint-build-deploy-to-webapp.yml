name: CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  linting-job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      # NOTE: 今回はテストを行わないため、依存パッケージのインストールは必要ありません。
      #       lint 用の flake8 のみ取得します。
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          flake8 .
      # NOTE: 今回はテストを作っていません。除きます。
      # - name: Test with pytest
      #   run: |
      #     pytest

  build-job:
    needs: linting-job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Create and start virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # 次のジョブのためにファイルをアップロードします。
      # NOTE: 仮想環境はランタイム OS と互換性がないのでアップロードされません。
      # NOTE: ジョブの最後にファイルをアップロードすると、
      #       デプロイに失敗した場合には、[アクション] タブからファイルをダウンロードしてデバッグやコンテンツの確認できます。
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v2
        with:
          name: webapp
          path: |
            .
            !venv/

  deployment-job:
    needs: build-job
    runs-on: ubuntu-latest
    steps:
      # Download artifacts
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: webapp
          path: .
      # Azure login
      # NOTE: CREDENTIALS は Deploy to Azure 拡張機能で自動生成してもらったものです。
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.flower_stuff_easy_web_django_ba83 }}

      # DISABLE_COLLECTSTATIC: 前のジョブで行ったので不要です。
      # POST_BUILD_COMMAND: ランタイムビルドに続いてコマンドを実行できるフックです。
      # SCM_DO_BUILD_DURING_DEPLOYMENT: oryx ビルドパイプラインを有効にするものらしいがよくわからないです。
      # DJANGO_ENV: Django を production にします。
      # NOTE: settings.py だけしか設定ファイルがないとき有効なのかは知りません。
      - name: Disable static collection and set migration command on App Service
        uses: Azure/appservice-settings@v1
        with:
          app-name: flower-stuff-easy-web-django
          mask-inputs: false
          general-settings-json: '{"linuxFxVersion": "PYTHON|3.8"}' #'General configuration settings as Key Value pairs'
          app-settings-json: '[
            { "name": "DISABLE_COLLECTSTATIC", "value": "true" },
            { "name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "true" },
            { "name": "DJANGO_ENV", "value": "production"}
          ]'
      # deploy web app
      - uses: azure/webapps-deploy@v2
        with:
          app-name: flower-stuff-easy-web-django
          package: .
          startup-command: AZURE_CREDENTIALS
      # Azure logout
      - name: logout
        run: |
          az logout
